# Generated from DataStory.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,330,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,189,8,11,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,5,13,198,8,13,10,13,12,13,201,9,13,1,14,
        4,14,204,8,14,11,14,12,14,205,1,14,1,14,4,14,210,8,14,11,14,12,14,
        211,1,14,1,14,1,14,5,14,217,8,14,10,14,12,14,220,9,14,3,14,222,8,
        14,1,15,1,15,1,15,1,16,1,16,5,16,229,8,16,10,16,12,16,232,9,16,1,
        16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,
        19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,
        25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,
        42,1,42,1,43,1,43,1,44,1,44,5,44,305,8,44,10,44,12,44,308,9,44,1,
        45,4,45,311,8,45,11,45,12,45,312,1,45,1,45,1,46,4,46,318,8,46,11,
        46,12,46,319,1,46,1,46,1,47,1,47,5,47,326,8,47,10,47,12,47,329,9,
        47,0,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,1,0,8,1,0,48,57,1,0,49,57,2,0,43,43,45,45,2,
        0,10,10,34,34,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,
        9,9,32,32,2,0,10,10,13,13,345,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        1,97,1,0,0,0,3,101,1,0,0,0,5,104,1,0,0,0,7,109,1,0,0,0,9,114,1,0,
        0,0,11,119,1,0,0,0,13,125,1,0,0,0,15,130,1,0,0,0,17,137,1,0,0,0,
        19,143,1,0,0,0,21,148,1,0,0,0,23,188,1,0,0,0,25,190,1,0,0,0,27,195,
        1,0,0,0,29,203,1,0,0,0,31,223,1,0,0,0,33,226,1,0,0,0,35,235,1,0,
        0,0,37,240,1,0,0,0,39,246,1,0,0,0,41,248,1,0,0,0,43,250,1,0,0,0,
        45,252,1,0,0,0,47,254,1,0,0,0,49,256,1,0,0,0,51,259,1,0,0,0,53,262,
        1,0,0,0,55,265,1,0,0,0,57,268,1,0,0,0,59,270,1,0,0,0,61,272,1,0,
        0,0,63,274,1,0,0,0,65,276,1,0,0,0,67,279,1,0,0,0,69,282,1,0,0,0,
        71,284,1,0,0,0,73,286,1,0,0,0,75,288,1,0,0,0,77,290,1,0,0,0,79,292,
        1,0,0,0,81,294,1,0,0,0,83,296,1,0,0,0,85,298,1,0,0,0,87,300,1,0,
        0,0,89,302,1,0,0,0,91,310,1,0,0,0,93,317,1,0,0,0,95,323,1,0,0,0,
        97,98,5,102,0,0,98,99,5,111,0,0,99,100,5,114,0,0,100,2,1,0,0,0,101,
        102,5,105,0,0,102,103,5,102,0,0,103,4,1,0,0,0,104,105,5,101,0,0,
        105,106,5,108,0,0,106,107,5,115,0,0,107,108,5,101,0,0,108,6,1,0,
        0,0,109,110,5,101,0,0,110,111,5,108,0,0,111,112,5,105,0,0,112,113,
        5,102,0,0,113,8,1,0,0,0,114,115,5,110,0,0,115,116,5,117,0,0,116,
        117,5,108,0,0,117,118,5,108,0,0,118,10,1,0,0,0,119,120,5,119,0,0,
        120,121,5,104,0,0,121,122,5,105,0,0,122,123,5,108,0,0,123,124,5,
        101,0,0,124,12,1,0,0,0,125,126,5,102,0,0,126,127,5,117,0,0,127,128,
        5,110,0,0,128,129,5,99,0,0,129,14,1,0,0,0,130,131,5,114,0,0,131,
        132,5,101,0,0,132,133,5,116,0,0,133,134,5,117,0,0,134,135,5,114,
        0,0,135,136,5,110,0,0,136,16,1,0,0,0,137,138,5,112,0,0,138,139,5,
        114,0,0,139,140,5,105,0,0,140,141,5,110,0,0,141,142,5,116,0,0,142,
        18,1,0,0,0,143,144,5,100,0,0,144,145,5,114,0,0,145,146,5,97,0,0,
        146,147,5,119,0,0,147,20,1,0,0,0,148,149,5,105,0,0,149,150,5,110,
        0,0,150,151,5,112,0,0,151,152,5,117,0,0,152,153,5,116,0,0,153,22,
        1,0,0,0,154,155,5,116,0,0,155,156,5,97,0,0,156,157,5,98,0,0,157,
        158,5,108,0,0,158,189,5,101,0,0,159,160,5,99,0,0,160,161,5,104,0,
        0,161,162,5,97,0,0,162,163,5,114,0,0,163,189,5,116,0,0,164,165,5,
        99,0,0,165,166,5,111,0,0,166,167,5,108,0,0,167,168,5,117,0,0,168,
        169,5,109,0,0,169,189,5,110,0,0,170,171,5,115,0,0,171,172,5,116,
        0,0,172,173,5,114,0,0,173,174,5,105,0,0,174,175,5,110,0,0,175,189,
        5,103,0,0,176,177,5,102,0,0,177,178,5,108,0,0,178,179,5,111,0,0,
        179,180,5,97,0,0,180,189,5,116,0,0,181,182,5,105,0,0,182,183,5,110,
        0,0,183,189,5,116,0,0,184,185,5,98,0,0,185,186,5,111,0,0,186,187,
        5,111,0,0,187,189,5,108,0,0,188,154,1,0,0,0,188,159,1,0,0,0,188,
        164,1,0,0,0,188,170,1,0,0,0,188,176,1,0,0,0,188,181,1,0,0,0,188,
        184,1,0,0,0,189,24,1,0,0,0,190,191,5,114,0,0,191,192,5,101,0,0,192,
        193,5,97,0,0,193,194,5,100,0,0,194,26,1,0,0,0,195,199,7,0,0,0,196,
        198,7,0,0,0,197,196,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,
        200,1,0,0,0,200,28,1,0,0,0,201,199,1,0,0,0,202,204,7,0,0,0,203,202,
        1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,
        1,0,0,0,207,209,9,0,0,0,208,210,7,0,0,0,209,208,1,0,0,0,210,211,
        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,221,1,0,0,0,213,214,
        3,31,15,0,214,218,7,1,0,0,215,217,7,0,0,0,216,215,1,0,0,0,217,220,
        1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,222,1,0,0,0,220,218,
        1,0,0,0,221,213,1,0,0,0,221,222,1,0,0,0,222,30,1,0,0,0,223,224,5,
        69,0,0,224,225,7,2,0,0,225,32,1,0,0,0,226,230,5,34,0,0,227,229,8,
        3,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,
        0,0,0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,34,0,0,234,34,1,
        0,0,0,235,236,5,116,0,0,236,237,5,114,0,0,237,238,5,117,0,0,238,
        239,5,101,0,0,239,36,1,0,0,0,240,241,5,102,0,0,241,242,5,97,0,0,
        242,243,5,108,0,0,243,244,5,115,0,0,244,245,5,101,0,0,245,38,1,0,
        0,0,246,247,5,43,0,0,247,40,1,0,0,0,248,249,5,45,0,0,249,42,1,0,
        0,0,250,251,5,42,0,0,251,44,1,0,0,0,252,253,5,47,0,0,253,46,1,0,
        0,0,254,255,5,94,0,0,255,48,1,0,0,0,256,257,5,61,0,0,257,258,5,61,
        0,0,258,50,1,0,0,0,259,260,5,33,0,0,260,261,5,61,0,0,261,52,1,0,
        0,0,262,263,5,60,0,0,263,264,5,61,0,0,264,54,1,0,0,0,265,266,5,62,
        0,0,266,267,5,61,0,0,267,56,1,0,0,0,268,269,5,60,0,0,269,58,1,0,
        0,0,270,271,5,62,0,0,271,60,1,0,0,0,272,273,5,38,0,0,273,62,1,0,
        0,0,274,275,5,124,0,0,275,64,1,0,0,0,276,277,5,38,0,0,277,278,5,
        38,0,0,278,66,1,0,0,0,279,280,5,124,0,0,280,281,5,124,0,0,281,68,
        1,0,0,0,282,283,5,33,0,0,283,70,1,0,0,0,284,285,5,61,0,0,285,72,
        1,0,0,0,286,287,5,40,0,0,287,74,1,0,0,0,288,289,5,41,0,0,289,76,
        1,0,0,0,290,291,5,123,0,0,291,78,1,0,0,0,292,293,5,125,0,0,293,80,
        1,0,0,0,294,295,5,91,0,0,295,82,1,0,0,0,296,297,5,93,0,0,297,84,
        1,0,0,0,298,299,5,44,0,0,299,86,1,0,0,0,300,301,5,58,0,0,301,88,
        1,0,0,0,302,306,7,4,0,0,303,305,7,5,0,0,304,303,1,0,0,0,305,308,
        1,0,0,0,306,304,1,0,0,0,306,307,1,0,0,0,307,90,1,0,0,0,308,306,1,
        0,0,0,309,311,7,6,0,0,310,309,1,0,0,0,311,312,1,0,0,0,312,310,1,
        0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,6,45,0,0,315,92,1,
        0,0,0,316,318,7,7,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,
        0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,6,46,0,0,322,94,1,
        0,0,0,323,327,5,35,0,0,324,326,8,7,0,0,325,324,1,0,0,0,326,329,1,
        0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,96,1,0,0,0,329,327,1,0,
        0,0,12,0,188,199,205,211,218,221,230,306,312,319,327,1,6,0,0
    ]

class DataStoryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FOR = 1
    IF = 2
    ELSE = 3
    ELIF = 4
    NULL = 5
    WHILE = 6
    FUNC = 7
    RET = 8
    PRINT = 9
    DRAW = 10
    INPUT = 11
    DTYPE = 12
    READ = 13
    INT = 14
    FLOAT = 15
    SCIENTIFIC = 16
    STR = 17
    TRUE = 18
    FALSE = 19
    ADD_OP = 20
    SUB_OP = 21
    MUL_OP = 22
    DIV_OP = 23
    POW_OP = 24
    EQ_OP = 25
    NEQ_OP = 26
    LTEQ_OP = 27
    GTEQ_OP = 28
    LT_OP = 29
    GT_OP = 30
    AND_DOP = 31
    OR_DOP = 32
    AND_OP = 33
    OR_OP = 34
    NOT_OP = 35
    ASSIGN_OP = 36
    LPAREN = 37
    RPAREN = 38
    LCURL = 39
    RCURL = 40
    LBRACK = 41
    RBRACK = 42
    COMMA = 43
    COLON = 44
    ID = 45
    WS = 46
    NEWLINE = 47
    COMMENT = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'for'", "'if'", "'else'", "'elif'", "'null'", "'while'", "'func'", 
            "'return'", "'print'", "'draw'", "'input'", "'read'", "'true'", 
            "'false'", "'+'", "'-'", "'*'", "'/'", "'^'", "'=='", "'!='", 
            "'<='", "'>='", "'<'", "'>'", "'&'", "'|'", "'&&'", "'||'", 
            "'!'", "'='", "'('", "')'", "'{'", "'}'", "'['", "']'", "','", 
            "':'" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", "RET", 
            "PRINT", "DRAW", "INPUT", "DTYPE", "READ", "INT", "FLOAT", "SCIENTIFIC", 
            "STR", "TRUE", "FALSE", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", 
            "POW_OP", "EQ_OP", "NEQ_OP", "LTEQ_OP", "GTEQ_OP", "LT_OP", 
            "GT_OP", "AND_DOP", "OR_DOP", "AND_OP", "OR_OP", "NOT_OP", "ASSIGN_OP", 
            "LPAREN", "RPAREN", "LCURL", "RCURL", "LBRACK", "RBRACK", "COMMA", 
            "COLON", "ID", "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", 
                  "RET", "PRINT", "DRAW", "INPUT", "DTYPE", "READ", "INT", 
                  "FLOAT", "SCIENTIFIC", "STR", "TRUE", "FALSE", "ADD_OP", 
                  "SUB_OP", "MUL_OP", "DIV_OP", "POW_OP", "EQ_OP", "NEQ_OP", 
                  "LTEQ_OP", "GTEQ_OP", "LT_OP", "GT_OP", "AND_DOP", "OR_DOP", 
                  "AND_OP", "OR_OP", "NOT_OP", "ASSIGN_OP", "LPAREN", "RPAREN", 
                  "LCURL", "RCURL", "LBRACK", "RBRACK", "COMMA", "COLON", 
                  "ID", "WS", "NEWLINE", "COMMENT" ]

    grammarFileName = "DataStory.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


