# Generated from DataStory.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,1,0,1,
        0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,3,11,200,8,11,1,12,1,12,5,12,204,8,
        12,10,12,12,12,207,9,12,1,13,4,13,210,8,13,11,13,12,13,211,1,13,
        1,13,4,13,216,8,13,11,13,12,13,217,1,14,1,14,5,14,222,8,14,10,14,
        12,14,225,9,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
        1,38,1,39,1,39,1,40,1,40,1,41,1,41,5,41,296,8,41,10,41,12,41,299,
        9,41,1,42,4,42,302,8,42,11,42,12,42,303,1,42,1,42,1,43,4,43,309,
        8,43,11,43,12,43,310,1,43,1,43,1,44,1,44,5,44,317,8,44,10,44,12,
        44,320,9,44,0,0,45,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,
        87,44,89,45,1,0,6,1,0,48,57,1,0,34,34,2,0,65,90,97,122,4,0,48,57,
        65,90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,337,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,1,91,1,0,0,0,3,95,
        1,0,0,0,5,98,1,0,0,0,7,103,1,0,0,0,9,108,1,0,0,0,11,113,1,0,0,0,
        13,119,1,0,0,0,15,124,1,0,0,0,17,131,1,0,0,0,19,137,1,0,0,0,21,142,
        1,0,0,0,23,199,1,0,0,0,25,201,1,0,0,0,27,209,1,0,0,0,29,219,1,0,
        0,0,31,228,1,0,0,0,33,233,1,0,0,0,35,239,1,0,0,0,37,241,1,0,0,0,
        39,243,1,0,0,0,41,245,1,0,0,0,43,247,1,0,0,0,45,250,1,0,0,0,47,253,
        1,0,0,0,49,256,1,0,0,0,51,259,1,0,0,0,53,261,1,0,0,0,55,263,1,0,
        0,0,57,265,1,0,0,0,59,267,1,0,0,0,61,270,1,0,0,0,63,273,1,0,0,0,
        65,275,1,0,0,0,67,277,1,0,0,0,69,279,1,0,0,0,71,281,1,0,0,0,73,283,
        1,0,0,0,75,285,1,0,0,0,77,287,1,0,0,0,79,289,1,0,0,0,81,291,1,0,
        0,0,83,293,1,0,0,0,85,301,1,0,0,0,87,308,1,0,0,0,89,314,1,0,0,0,
        91,92,5,102,0,0,92,93,5,111,0,0,93,94,5,114,0,0,94,2,1,0,0,0,95,
        96,5,105,0,0,96,97,5,102,0,0,97,4,1,0,0,0,98,99,5,101,0,0,99,100,
        5,108,0,0,100,101,5,115,0,0,101,102,5,101,0,0,102,6,1,0,0,0,103,
        104,5,101,0,0,104,105,5,108,0,0,105,106,5,105,0,0,106,107,5,102,
        0,0,107,8,1,0,0,0,108,109,5,110,0,0,109,110,5,117,0,0,110,111,5,
        108,0,0,111,112,5,108,0,0,112,10,1,0,0,0,113,114,5,119,0,0,114,115,
        5,104,0,0,115,116,5,105,0,0,116,117,5,108,0,0,117,118,5,101,0,0,
        118,12,1,0,0,0,119,120,5,102,0,0,120,121,5,117,0,0,121,122,5,110,
        0,0,122,123,5,99,0,0,123,14,1,0,0,0,124,125,5,114,0,0,125,126,5,
        101,0,0,126,127,5,116,0,0,127,128,5,117,0,0,128,129,5,114,0,0,129,
        130,5,110,0,0,130,16,1,0,0,0,131,132,5,112,0,0,132,133,5,114,0,0,
        133,134,5,105,0,0,134,135,5,110,0,0,135,136,5,116,0,0,136,18,1,0,
        0,0,137,138,5,100,0,0,138,139,5,114,0,0,139,140,5,97,0,0,140,141,
        5,119,0,0,141,20,1,0,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,
        145,5,112,0,0,145,146,5,117,0,0,146,147,5,116,0,0,147,22,1,0,0,0,
        148,149,5,116,0,0,149,150,5,97,0,0,150,151,5,98,0,0,151,152,5,108,
        0,0,152,200,5,101,0,0,153,154,5,99,0,0,154,155,5,104,0,0,155,156,
        5,97,0,0,156,157,5,114,0,0,157,200,5,116,0,0,158,159,5,100,0,0,159,
        160,5,97,0,0,160,161,5,116,0,0,161,162,5,97,0,0,162,163,5,115,0,
        0,163,164,5,101,0,0,164,200,5,116,0,0,165,166,5,114,0,0,166,167,
        5,111,0,0,167,200,5,119,0,0,168,169,5,99,0,0,169,170,5,111,0,0,170,
        171,5,108,0,0,171,172,5,117,0,0,172,173,5,109,0,0,173,200,5,110,
        0,0,174,175,5,115,0,0,175,176,5,116,0,0,176,177,5,111,0,0,177,178,
        5,114,0,0,178,200,5,121,0,0,179,180,5,115,0,0,180,181,5,116,0,0,
        181,182,5,114,0,0,182,183,5,105,0,0,183,184,5,110,0,0,184,200,5,
        103,0,0,185,186,5,102,0,0,186,187,5,108,0,0,187,188,5,111,0,0,188,
        189,5,97,0,0,189,200,5,116,0,0,190,191,5,105,0,0,191,192,5,110,0,
        0,192,200,5,116,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,196,
        5,114,0,0,196,197,5,117,0,0,197,198,5,99,0,0,198,200,5,116,0,0,199,
        148,1,0,0,0,199,153,1,0,0,0,199,158,1,0,0,0,199,165,1,0,0,0,199,
        168,1,0,0,0,199,174,1,0,0,0,199,179,1,0,0,0,199,185,1,0,0,0,199,
        190,1,0,0,0,199,193,1,0,0,0,200,24,1,0,0,0,201,205,7,0,0,0,202,204,
        7,0,0,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,
        1,0,0,0,206,26,1,0,0,0,207,205,1,0,0,0,208,210,7,0,0,0,209,208,1,
        0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,1,
        0,0,0,213,215,9,0,0,0,214,216,7,0,0,0,215,214,1,0,0,0,216,217,1,
        0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,28,1,0,0,0,219,223,5,34,
        0,0,220,222,8,1,0,0,221,220,1,0,0,0,222,225,1,0,0,0,223,221,1,0,
        0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,227,5,34,
        0,0,227,30,1,0,0,0,228,229,5,116,0,0,229,230,5,114,0,0,230,231,5,
        117,0,0,231,232,5,101,0,0,232,32,1,0,0,0,233,234,5,102,0,0,234,235,
        5,97,0,0,235,236,5,108,0,0,236,237,5,115,0,0,237,238,5,101,0,0,238,
        34,1,0,0,0,239,240,5,43,0,0,240,36,1,0,0,0,241,242,5,45,0,0,242,
        38,1,0,0,0,243,244,5,42,0,0,244,40,1,0,0,0,245,246,5,47,0,0,246,
        42,1,0,0,0,247,248,5,61,0,0,248,249,5,61,0,0,249,44,1,0,0,0,250,
        251,5,33,0,0,251,252,5,61,0,0,252,46,1,0,0,0,253,254,5,60,0,0,254,
        255,5,61,0,0,255,48,1,0,0,0,256,257,5,62,0,0,257,258,5,61,0,0,258,
        50,1,0,0,0,259,260,5,60,0,0,260,52,1,0,0,0,261,262,5,62,0,0,262,
        54,1,0,0,0,263,264,5,38,0,0,264,56,1,0,0,0,265,266,5,124,0,0,266,
        58,1,0,0,0,267,268,5,38,0,0,268,269,5,38,0,0,269,60,1,0,0,0,270,
        271,5,124,0,0,271,272,5,124,0,0,272,62,1,0,0,0,273,274,5,33,0,0,
        274,64,1,0,0,0,275,276,5,61,0,0,276,66,1,0,0,0,277,278,5,40,0,0,
        278,68,1,0,0,0,279,280,5,41,0,0,280,70,1,0,0,0,281,282,5,123,0,0,
        282,72,1,0,0,0,283,284,5,125,0,0,284,74,1,0,0,0,285,286,5,91,0,0,
        286,76,1,0,0,0,287,288,5,93,0,0,288,78,1,0,0,0,289,290,5,44,0,0,
        290,80,1,0,0,0,291,292,5,58,0,0,292,82,1,0,0,0,293,297,7,2,0,0,294,
        296,7,3,0,0,295,294,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,
        298,1,0,0,0,298,84,1,0,0,0,299,297,1,0,0,0,300,302,7,4,0,0,301,300,
        1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,305,
        1,0,0,0,305,306,6,42,0,0,306,86,1,0,0,0,307,309,7,5,0,0,308,307,
        1,0,0,0,309,310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,
        1,0,0,0,312,313,6,43,0,0,313,88,1,0,0,0,314,318,5,35,0,0,315,317,
        8,5,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,
        1,0,0,0,319,90,1,0,0,0,320,318,1,0,0,0,10,0,199,205,211,217,223,
        297,303,310,318,1,6,0,0
    ]

class DataStoryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FOR = 1
    IF = 2
    ELSE = 3
    ELIF = 4
    NULL = 5
    WHILE = 6
    FUNC = 7
    RET = 8
    PRINT = 9
    DRAW = 10
    INPUT = 11
    DTYPE = 12
    INT = 13
    FLOAT = 14
    STR = 15
    TRUE = 16
    FALSE = 17
    ADD_OP = 18
    SUB_OP = 19
    MUL_OP = 20
    DIV_OP = 21
    EQ_OP = 22
    NEQ_OP = 23
    LTEQ_OP = 24
    GTEQ_OP = 25
    LT_OP = 26
    GT_OP = 27
    AND_DOP = 28
    OR_DOP = 29
    AND_OP = 30
    OR_OP = 31
    NOT_OP = 32
    ASSIGN_OP = 33
    LPAREN = 34
    RPAREN = 35
    LCURL = 36
    RCURL = 37
    LBRACK = 38
    RBRACK = 39
    COMMA = 40
    COLON = 41
    ID = 42
    WS = 43
    NEWLINE = 44
    COMMENT = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'for'", "'if'", "'else'", "'elif'", "'null'", "'while'", "'func'", 
            "'return'", "'print'", "'draw'", "'input'", "'true'", "'false'", 
            "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<='", "'>='", 
            "'<'", "'>'", "'&'", "'|'", "'&&'", "'||'", "'!'", "'='", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", "RET", 
            "PRINT", "DRAW", "INPUT", "DTYPE", "INT", "FLOAT", "STR", "TRUE", 
            "FALSE", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", "EQ_OP", "NEQ_OP", 
            "LTEQ_OP", "GTEQ_OP", "LT_OP", "GT_OP", "AND_DOP", "OR_DOP", 
            "AND_OP", "OR_OP", "NOT_OP", "ASSIGN_OP", "LPAREN", "RPAREN", 
            "LCURL", "RCURL", "LBRACK", "RBRACK", "COMMA", "COLON", "ID", 
            "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", 
                  "RET", "PRINT", "DRAW", "INPUT", "DTYPE", "INT", "FLOAT", 
                  "STR", "TRUE", "FALSE", "ADD_OP", "SUB_OP", "MUL_OP", 
                  "DIV_OP", "EQ_OP", "NEQ_OP", "LTEQ_OP", "GTEQ_OP", "LT_OP", 
                  "GT_OP", "AND_DOP", "OR_DOP", "AND_OP", "OR_OP", "NOT_OP", 
                  "ASSIGN_OP", "LPAREN", "RPAREN", "LCURL", "RCURL", "LBRACK", 
                  "RBRACK", "COMMA", "COLON", "ID", "WS", "NEWLINE", "COMMENT" ]

    grammarFileName = "DataStory.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


