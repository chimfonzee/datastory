# Generated from DataStory.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,46,336,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,202,8,11,1,12,1,12,
        5,12,206,8,12,10,12,12,12,209,9,12,1,13,4,13,212,8,13,11,13,12,13,
        213,1,13,1,13,4,13,218,8,13,11,13,12,13,219,1,13,1,13,1,13,5,13,
        225,8,13,10,13,12,13,228,9,13,3,13,230,8,13,1,14,1,14,1,14,1,15,
        1,15,5,15,237,8,15,10,15,12,15,240,9,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
        1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,5,42,
        311,8,42,10,42,12,42,314,9,42,1,43,4,43,317,8,43,11,43,12,43,318,
        1,43,1,43,1,44,4,44,324,8,44,11,44,12,44,325,1,44,1,44,1,45,1,45,
        5,45,332,8,45,10,45,12,45,335,9,45,0,0,46,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,1,0,8,1,0,49,57,1,0,48,
        57,2,0,43,43,45,45,2,0,10,10,34,34,2,0,65,90,97,122,4,0,48,57,65,
        90,95,95,97,122,2,0,9,9,32,32,2,0,10,10,13,13,354,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
        1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,
        1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,1,93,
        1,0,0,0,3,97,1,0,0,0,5,100,1,0,0,0,7,105,1,0,0,0,9,110,1,0,0,0,11,
        115,1,0,0,0,13,121,1,0,0,0,15,126,1,0,0,0,17,133,1,0,0,0,19,139,
        1,0,0,0,21,144,1,0,0,0,23,201,1,0,0,0,25,203,1,0,0,0,27,211,1,0,
        0,0,29,231,1,0,0,0,31,234,1,0,0,0,33,243,1,0,0,0,35,248,1,0,0,0,
        37,254,1,0,0,0,39,256,1,0,0,0,41,258,1,0,0,0,43,260,1,0,0,0,45,262,
        1,0,0,0,47,265,1,0,0,0,49,268,1,0,0,0,51,271,1,0,0,0,53,274,1,0,
        0,0,55,276,1,0,0,0,57,278,1,0,0,0,59,280,1,0,0,0,61,282,1,0,0,0,
        63,285,1,0,0,0,65,288,1,0,0,0,67,290,1,0,0,0,69,292,1,0,0,0,71,294,
        1,0,0,0,73,296,1,0,0,0,75,298,1,0,0,0,77,300,1,0,0,0,79,302,1,0,
        0,0,81,304,1,0,0,0,83,306,1,0,0,0,85,308,1,0,0,0,87,316,1,0,0,0,
        89,323,1,0,0,0,91,329,1,0,0,0,93,94,5,102,0,0,94,95,5,111,0,0,95,
        96,5,114,0,0,96,2,1,0,0,0,97,98,5,105,0,0,98,99,5,102,0,0,99,4,1,
        0,0,0,100,101,5,101,0,0,101,102,5,108,0,0,102,103,5,115,0,0,103,
        104,5,101,0,0,104,6,1,0,0,0,105,106,5,101,0,0,106,107,5,108,0,0,
        107,108,5,105,0,0,108,109,5,102,0,0,109,8,1,0,0,0,110,111,5,110,
        0,0,111,112,5,117,0,0,112,113,5,108,0,0,113,114,5,108,0,0,114,10,
        1,0,0,0,115,116,5,119,0,0,116,117,5,104,0,0,117,118,5,105,0,0,118,
        119,5,108,0,0,119,120,5,101,0,0,120,12,1,0,0,0,121,122,5,102,0,0,
        122,123,5,117,0,0,123,124,5,110,0,0,124,125,5,99,0,0,125,14,1,0,
        0,0,126,127,5,114,0,0,127,128,5,101,0,0,128,129,5,116,0,0,129,130,
        5,117,0,0,130,131,5,114,0,0,131,132,5,110,0,0,132,16,1,0,0,0,133,
        134,5,112,0,0,134,135,5,114,0,0,135,136,5,105,0,0,136,137,5,110,
        0,0,137,138,5,116,0,0,138,18,1,0,0,0,139,140,5,100,0,0,140,141,5,
        114,0,0,141,142,5,97,0,0,142,143,5,119,0,0,143,20,1,0,0,0,144,145,
        5,105,0,0,145,146,5,110,0,0,146,147,5,112,0,0,147,148,5,117,0,0,
        148,149,5,116,0,0,149,22,1,0,0,0,150,151,5,116,0,0,151,152,5,97,
        0,0,152,153,5,98,0,0,153,154,5,108,0,0,154,202,5,101,0,0,155,156,
        5,99,0,0,156,157,5,104,0,0,157,158,5,97,0,0,158,159,5,114,0,0,159,
        202,5,116,0,0,160,161,5,100,0,0,161,162,5,97,0,0,162,163,5,116,0,
        0,163,164,5,97,0,0,164,165,5,115,0,0,165,166,5,101,0,0,166,202,5,
        116,0,0,167,168,5,114,0,0,168,169,5,111,0,0,169,202,5,119,0,0,170,
        171,5,99,0,0,171,172,5,111,0,0,172,173,5,108,0,0,173,174,5,117,0,
        0,174,175,5,109,0,0,175,202,5,110,0,0,176,177,5,115,0,0,177,178,
        5,116,0,0,178,179,5,111,0,0,179,180,5,114,0,0,180,202,5,121,0,0,
        181,182,5,115,0,0,182,183,5,116,0,0,183,184,5,114,0,0,184,185,5,
        105,0,0,185,186,5,110,0,0,186,202,5,103,0,0,187,188,5,102,0,0,188,
        189,5,108,0,0,189,190,5,111,0,0,190,191,5,97,0,0,191,202,5,116,0,
        0,192,193,5,105,0,0,193,194,5,110,0,0,194,202,5,116,0,0,195,196,
        5,115,0,0,196,197,5,116,0,0,197,198,5,114,0,0,198,199,5,117,0,0,
        199,200,5,99,0,0,200,202,5,116,0,0,201,150,1,0,0,0,201,155,1,0,0,
        0,201,160,1,0,0,0,201,167,1,0,0,0,201,170,1,0,0,0,201,176,1,0,0,
        0,201,181,1,0,0,0,201,187,1,0,0,0,201,192,1,0,0,0,201,195,1,0,0,
        0,202,24,1,0,0,0,203,207,7,0,0,0,204,206,7,1,0,0,205,204,1,0,0,0,
        206,209,1,0,0,0,207,205,1,0,0,0,207,208,1,0,0,0,208,26,1,0,0,0,209,
        207,1,0,0,0,210,212,7,1,0,0,211,210,1,0,0,0,212,213,1,0,0,0,213,
        211,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,217,9,0,0,0,216,
        218,7,1,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,217,1,0,0,0,219,
        220,1,0,0,0,220,229,1,0,0,0,221,222,3,29,14,0,222,226,7,0,0,0,223,
        225,7,1,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,
        227,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,229,221,1,0,0,0,229,
        230,1,0,0,0,230,28,1,0,0,0,231,232,5,69,0,0,232,233,7,2,0,0,233,
        30,1,0,0,0,234,238,5,34,0,0,235,237,8,3,0,0,236,235,1,0,0,0,237,
        240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,
        238,1,0,0,0,241,242,5,34,0,0,242,32,1,0,0,0,243,244,5,116,0,0,244,
        245,5,114,0,0,245,246,5,117,0,0,246,247,5,101,0,0,247,34,1,0,0,0,
        248,249,5,102,0,0,249,250,5,97,0,0,250,251,5,108,0,0,251,252,5,115,
        0,0,252,253,5,101,0,0,253,36,1,0,0,0,254,255,5,43,0,0,255,38,1,0,
        0,0,256,257,5,45,0,0,257,40,1,0,0,0,258,259,5,42,0,0,259,42,1,0,
        0,0,260,261,5,47,0,0,261,44,1,0,0,0,262,263,5,61,0,0,263,264,5,61,
        0,0,264,46,1,0,0,0,265,266,5,33,0,0,266,267,5,61,0,0,267,48,1,0,
        0,0,268,269,5,60,0,0,269,270,5,61,0,0,270,50,1,0,0,0,271,272,5,62,
        0,0,272,273,5,61,0,0,273,52,1,0,0,0,274,275,5,60,0,0,275,54,1,0,
        0,0,276,277,5,62,0,0,277,56,1,0,0,0,278,279,5,38,0,0,279,58,1,0,
        0,0,280,281,5,124,0,0,281,60,1,0,0,0,282,283,5,38,0,0,283,284,5,
        38,0,0,284,62,1,0,0,0,285,286,5,124,0,0,286,287,5,124,0,0,287,64,
        1,0,0,0,288,289,5,33,0,0,289,66,1,0,0,0,290,291,5,61,0,0,291,68,
        1,0,0,0,292,293,5,40,0,0,293,70,1,0,0,0,294,295,5,41,0,0,295,72,
        1,0,0,0,296,297,5,123,0,0,297,74,1,0,0,0,298,299,5,125,0,0,299,76,
        1,0,0,0,300,301,5,91,0,0,301,78,1,0,0,0,302,303,5,93,0,0,303,80,
        1,0,0,0,304,305,5,44,0,0,305,82,1,0,0,0,306,307,5,58,0,0,307,84,
        1,0,0,0,308,312,7,4,0,0,309,311,7,5,0,0,310,309,1,0,0,0,311,314,
        1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,86,1,0,0,0,314,312,1,
        0,0,0,315,317,7,6,0,0,316,315,1,0,0,0,317,318,1,0,0,0,318,316,1,
        0,0,0,318,319,1,0,0,0,319,320,1,0,0,0,320,321,6,43,0,0,321,88,1,
        0,0,0,322,324,7,7,0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,323,1,
        0,0,0,325,326,1,0,0,0,326,327,1,0,0,0,327,328,6,44,0,0,328,90,1,
        0,0,0,329,333,5,35,0,0,330,332,8,7,0,0,331,330,1,0,0,0,332,335,1,
        0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,92,1,0,0,0,335,333,1,0,
        0,0,12,0,201,207,213,219,226,229,238,312,318,325,333,1,6,0,0
    ]

class DataStoryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FOR = 1
    IF = 2
    ELSE = 3
    ELIF = 4
    NULL = 5
    WHILE = 6
    FUNC = 7
    RET = 8
    PRINT = 9
    DRAW = 10
    INPUT = 11
    DTYPE = 12
    INT = 13
    FLOAT = 14
    SCIENTIFIC = 15
    STR = 16
    TRUE = 17
    FALSE = 18
    ADD_OP = 19
    SUB_OP = 20
    MUL_OP = 21
    DIV_OP = 22
    EQ_OP = 23
    NEQ_OP = 24
    LTEQ_OP = 25
    GTEQ_OP = 26
    LT_OP = 27
    GT_OP = 28
    AND_DOP = 29
    OR_DOP = 30
    AND_OP = 31
    OR_OP = 32
    NOT_OP = 33
    ASSIGN_OP = 34
    LPAREN = 35
    RPAREN = 36
    LCURL = 37
    RCURL = 38
    LBRACK = 39
    RBRACK = 40
    COMMA = 41
    COLON = 42
    ID = 43
    WS = 44
    NEWLINE = 45
    COMMENT = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'for'", "'if'", "'else'", "'elif'", "'null'", "'while'", "'func'", 
            "'return'", "'print'", "'draw'", "'input'", "'true'", "'false'", 
            "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'<='", "'>='", 
            "'<'", "'>'", "'&'", "'|'", "'&&'", "'||'", "'!'", "'='", "'('", 
            "')'", "'{'", "'}'", "'['", "']'", "','", "':'" ]

    symbolicNames = [ "<INVALID>",
            "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", "RET", 
            "PRINT", "DRAW", "INPUT", "DTYPE", "INT", "FLOAT", "SCIENTIFIC", 
            "STR", "TRUE", "FALSE", "ADD_OP", "SUB_OP", "MUL_OP", "DIV_OP", 
            "EQ_OP", "NEQ_OP", "LTEQ_OP", "GTEQ_OP", "LT_OP", "GT_OP", "AND_DOP", 
            "OR_DOP", "AND_OP", "OR_OP", "NOT_OP", "ASSIGN_OP", "LPAREN", 
            "RPAREN", "LCURL", "RCURL", "LBRACK", "RBRACK", "COMMA", "COLON", 
            "ID", "WS", "NEWLINE", "COMMENT" ]

    ruleNames = [ "FOR", "IF", "ELSE", "ELIF", "NULL", "WHILE", "FUNC", 
                  "RET", "PRINT", "DRAW", "INPUT", "DTYPE", "INT", "FLOAT", 
                  "SCIENTIFIC", "STR", "TRUE", "FALSE", "ADD_OP", "SUB_OP", 
                  "MUL_OP", "DIV_OP", "EQ_OP", "NEQ_OP", "LTEQ_OP", "GTEQ_OP", 
                  "LT_OP", "GT_OP", "AND_DOP", "OR_DOP", "AND_OP", "OR_OP", 
                  "NOT_OP", "ASSIGN_OP", "LPAREN", "RPAREN", "LCURL", "RCURL", 
                  "LBRACK", "RBRACK", "COMMA", "COLON", "ID", "WS", "NEWLINE", 
                  "COMMENT" ]

    grammarFileName = "DataStory.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


